<template>
		<!-- class="mc-class {{ utils.bem('notice-bar', { withicon: mode, wrapable }) }}" -->
	<view
		wx:if="{{ show }}"
		class="mc-class mc-notice-bar {{wrapable ? 'is-wrapper' : ''}}"
		style="color: {{ color }}; background-color: {{ backgroundColor }};"
		bind:tap="handleClick"
	>
		<mc-icon
			wx:if="{{ mode === 'closeable' }}"
			mc-class="mc-notice-bar__close"
			type="close"
			catch:tap="handleClose"
		/>
		<slot wx:else name="left" />

		<view class="mc-notice-bar__wrap">
			<view class="mc-notice-bar__content {{ !scrollable && !wrapable ? 'mc-ellipsis' : '' }}" animation="{{ animationData }}">
			{{ text }}
			</view>
		</view>
		
		<navigator
			wx:if="{{ mode === 'link' }}"
			url="{{ url }}"
			open-type="{{ openType }}"
		>
			<mc-icon mc-class="mc-notice-bar__right-icon" type="right" />
		</navigator>
		<slot wx:else name="right" />
	</view>
</template>
<script>
import McComponent from '../common/component';

McComponent({
	props: {
		text: {
			type: String,
			value: '',
			observer() {
				wx.nextTick(() => {
					this.init();
				});
			},
		},
		mode: {
			type: String,
			value: '',
		},
		url: {
			type: String,
			value: '',
		},
		openType: {
			type: String,
			value: 'navigate',
		},
		closePosition: {
			type: String,
			value: 'left',
		},
		delay: {
			type: Number,
			value: 1,
		},
		speed: {
			type: Number,
			value: 50,
			observer() {
				wx.nextTick(() => {
					this.init();
				});
			},
		},
		scrollable: {
			type: Boolean,
			value: true,
		},
		color: {
			type: String,
			value: '#ED6F32',
		},
		backgroundColor: {
			type: String,
			value: '#FDFBEC',
		},
		wrapable: Boolean
	},
	data: {
		show: true,
	},
	lifetimes: {
		attached() {
			 this.resetAnimation = wx.createAnimation({
				duration: 0,
				timingFunction: 'linear',
			});
		},
		detached() {
			this.timer && clearTimeout(this.timer);
		}
	},
	methods: {
		init() {
			Promise.all([
				this.getRect('.mc-notice-bar__content'),
				this.getRect('.mc-notice-bar__wrap')
			]).then((rects) => {
				const [contentRect, wrapRect] = rects;
				if (contentRect == null || wrapRect == null || !contentRect.width || !wrapRect.width) return;

				const { speed, scrollable, delay } = this.data;

				if (scrollable && wrapRect.width < contentRect.width) {
					const duration = (contentRect.width / speed) * 1000;

					this.wrapWidth = wrapRect.width;
					this.contentWidth = contentRect.width;
					this.duration = duration;
					this.animation = wx.createAnimation({
						duration,
						timingFunction: 'linear',
						delay,
					});

					this.scroll();
				}
			});
		},
		scroll() {
			this.timer && clearTimeout(this.timer);
			this.timer = null;

			this.setData({
				animationData: this.resetAnimation
					.translateX(this.wrapWidth)
					.step()
					.export(),
			});

			setTimeout(() => {
				this.setData({
					animationData: this.animation
						.translateX(-this.contentWidth)
						.step()
						.export(),
				});
			}, 20);

			this.timer = setTimeout(() => {
				this.scroll();
			}, this.duration);
		},

		handleClose() {
			this.timer && clearTimeout(this.timer);
			this.timer = null;

			this.setData({ show: false });
		},

		handleClick(event) {
			this.$emit('click', event);
		},
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

.mc-notice-bar {
	display: -webkit-flex;
	display: flex;
	-webkit-align-items: center;
	align-items: center;
	height: 70rpx;
	padding: 0 30rpx;
	font-size: 28rpx;
	color: #ed6a0c;
	line-height:48rpx;
	background-color: #fffbe8;
	&.is-wrapper {
		height: auto;
		padding: 16rpx 32rpx;
		.mc-notice-bar__wrap {
			height: auto
		}
		.mc-notice-bar__content {
			position: relative;
			white-space: normal
		}
	}
	.mc-notice-bar__wrap {
		position: relative;
		-webkit-flex: 1;
		flex: 1;
		overflow: hidden;
		height: 48rpx;
	}
	.mc-notice-bar__content {
		position: absolute;
		white-space: nowrap
	}
	.mc-notice-bar__content.mc-ellipsis {
		max-width: 100%
	}
	.mc-notice-bar__close {
		font-size: 22rpx;
		font-weight: 900;
		margin-right: 11rpx;
	}
	.mc-notice-bar__right-icon {
		font-size: 22rpx;
		font-weight: 900;
		margin-left: 11rpx;
	}
}


</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-icon": "../icon/index"
	}
}
</config>
