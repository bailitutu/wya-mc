<template>
	<view class="mc-upload-picker">
		<view class="mc-upload-picker__wrapper">
			<!-- 预览样式 -->
			<view
				wx:if="{{ previewImage }}"
				wx:for="{{ currentValue.image }}"
				wx:key="index"
				class="mc-upload-picker__preview"
				data-index="{{ index }}"
				bind:tap="handleClickPreview"
			>
				<mc-image
					wx:if="{{ type === 'image' }}"
					fit="{{ imageFit }}"
					src="{{ item.url || item.path }}"
					alt="{{ item.name || ('图片' + index) }}"
					mc-class="mc-upload-picker__preview-image"
					width="{{previewSize}}"
					height="{{previewSize}}"
					data-index="{{ index }}"
					bind:tap="handlePreviewImage"
				/>
				<!-- TODO video -->
				<!-- TODO file -->
				<view
					wx:else
					class="mc-upload-picker__file"
					style="width: {{ previewSize }}rpx; height: {{ previewSize }}rpx;"
				>
					<mc-icon type="description" class="mc-upload-picker__file-icon" />
					<view class="mc-upload-picker__file-name mc-ellipsis">{{ item.name || item.url || item.path }}</view>
				</view>
				<view
					wx:if="{{ item.status === 'uploading' || item.status === 'failed' }}"
					class="mc-upload-picker__mask"
				>
					<mc-icon wx:if="{{ item.status === 'failed' }}" type="o-warning" class="mc-upload-picker__mask-icon" />
					<mc-spin wx:else class="mc-upload-picker__loading" />
					<text class="mc-upload-picker__upload-text">上传失败</text>
				</view>
				<mc-icon
					type="close"
					mc-class="mc-upload-picker__preview-delete"
					data-index="{{ index }}"
					bind:tap="handleDeleteItem"
				/>
			</view>

			<!-- 上传样式 -->
			<block>
				<mc-upload 
					class="mc-upload-picker__slot"
					bind:ready="handleReady"
				>
					<view
						class="mc-upload-picker__upload {{ disabled ? 'mc-upload-picker__upload--disabled': ''}}"
						style="width: {{ previewSize }}rpx; height: {{ previewSize }}rpx;"
					>
						<mc-icon type="plus" mc-class="mc-upload-picker__upload-icon" />
						<text wx:if="{{ uploadText }}" class="mc-upload-picker__upload-text">{{ uploadText }}</text>
					</view>
				</mc-upload>
			</block>
		</view>
	</view>

</template>
<script>
import McComponent from '../common/component';
import { isImageFile, recognizer } from './utils';

let app = getApp();
app.$mc = app.$mc || { config: {} };

McComponent({
	relations: {
		'../form/form-item': {
			type: 'ancestor',
			linked(parent) {
				this.parent = parent;
			},
			unlinked(child) {
				this.parent = null;
			}
		}
	},
	props: {
		disabled: Boolean,
		max: {
			type: Number,
			value: Number.MAX_SAFE_INTEGER
		},
		uploadText: String,
		previewSize: {
			type: null,
			value: 150,
		},
		name: {
			type: Number,
			optionalTypes: [String],
			value: '',
		},
		dataSource: {
			type: Array,
			value: [],
			observer: 'rebuild',
		},
		picker: {
			type: Array,
			value: ['image']
		},
		previewImage: {
			type: Boolean,
			value: true,
		},
		previewFullImage: {
			type: Boolean,
			value: true,
		},
		imageFit: {
			type: String,
			value: 'scaleToFill',
		},
		uploadOpts: {
			type: Object,
			value: {
			}
		},
		useReady: Boolean
	},
	lifetimes: {
		ready() {
			this.rebuild();
		}
	},
	data: {

		currentValue: {
			image: [],
			video: [],
			file: []
		},

		currentMax: {},
		currentMultiple: {},

		isInCount: true,
	},
	methods: {
		rebuild() {
			this.setData(this.computed());
		},
		computed(value) {
			const { max, dataSource, currentValue } = this.data;
			const { image = [], video = [], file = [] } = currentValue;

			let dynamicValue = value || currentValue;
			let computedValue = {};
			let computedMax = {};
			
			computedValue = dynamicValue;

			console.log(computedValue);
			// 如果过滤出上传成功的文件，在上传中时，currentValue占位，达到max，upload控件仍不会隐藏，用户可以再次上传，导致会超出max
			let imageC = image.length || 0;
			let videoC = video.length || 0;
			let fileC = file.length || 0;
			
			
			if (typeof max === 'number') {
				let curNum = imageC + videoC + fileC;
				const leftNum = max - curNum;
				computedMax = {
					image: leftNum,
					video: leftNum,
					file: leftNum,
				};
			} else if (typeof max === 'object') {
				const { image, video, file } = max;
				const $ = {};
				image && ($.image = image - imageC);
				video && ($.video = video - videoC);
				file && ($.file = file - fileC);

				computedMax = max;
			}

			return {
				currentMax: computedMax,
				currentValue: computedValue,
				currentMultiple: {
					image: computedMax.image >= 1,
					video: computedMax.video >= 1,
					file: computedMax.file >= 1,
				}
			};
		},

		isEmpty(v) {
			const [image, video, file] = Object.values(v);
			if (image.length || video.length || file.length) return false;
			return true;
		},

		parseDataSource(dataSource) {
			const initialData = { image: [], video: [], file: [] };
			const fn = (app.$mc.config.UploadPicker || {}).recognizer || recognizer;
			return dataSource.reduce((pre, cur) => {
				switch (recognizer(cur)) {
					case 'image':
						pre.image.push(cur);
						return pre;
					case 'video':
						pre.video.push(cur);
						return pre;
					case 'file':
						pre.file.push(cur);
						return pre;
					default:
						return pre;
				}
			}, initialData);
		},

		getUrl(res) {
			return this.data.formatter ? this.data.formatter(res) : res[this.data.urlKey || 'url'];
		},

		handleReady(e) {
			let done = (fns = {}) => {
				let override = {};

				override.onFileStart = (res, type = 'image') => {
					const { currentValue } = this.data;
					res.title = res.name;

					currentValue[type].push(res);
					this.setData(this.computed());
					fns.onFileStart && fns.onFileStart(res, type);
				};

				override.onFileProgress = (e, file, type = 'image') => {
					const { currentValue } = this.data;

					if (parseInt(e.percent, 10) <= 100) {
						currentValue[type] = currentValue[type].map((item) => {
							if (file.uid === item.uid) {
								return {
									...item,
									percent: e.percent
								};
							}
							return item;
						});

						this.setData({ currentValue });
					}

					fns.onFileProgress && fns.onFileProgress(e, file, type);
				};

				override.onFileSuccess = (res, file, cycle, type = 'image') => {
					const { currentValue, formatter } = this.data;

					let dataSource;
					currentValue[type] = currentValue[type].map((item) => {
						if (item.uid === file.uid) {
							return this.getUrl(res);
						}
						return item;
					});

					// 将已经上传成功的文件传递给外部
					currentValue[type] = currentValue[type].filter((it) => !it.errorFlag && this.getUrl(res));
					

					this.setData(this.computed(currentValue));

					fns.onFileSuccess && fns.onFileSuccess(res, type);
					this.sync(currentValue[type], type);
				};

				override.onFileError = (res, file, cycle, type = 'image') => {
					const { currentValue } = this.data;
					// 内部保存上传失败的文件，不传递给外层
					currentValue[type] = currentValue[type].map((item) => {
						if (item.uid === file.uid) {
							return {
								name: file.name,
								type: file.type,
								...item,
								...res,
								errorFlag: new Date().getTime()
							};
						}
						return item;
					});

					this.setData({ currentValue });
					fns.onFileError && fns.onFileError(res, ...args);
				};

				e.detail.done({ 
					...fns, 
					...override 
				});
			};
			if (this.data.useReady) {
				this.$emit('ready', { done });
			} else {
				done();
			}
		},

		sync(v, type = 'image') {
			const { currentValue, picker } = this.data;
			v = {
				...currentValue,
				[type]: v
			};

			v = picker.reduce((pre, cur) => {
				return pre.concat(v[cur] || []);
			}, []);

			wx.nextTick(() => {
				this.$emit('change', v);
				this.parent && this.parent.fieldChange();
			});
		},
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

.mc-upload-picker {
	position: relative;
	display: inline-block
}

.mc-upload-picker__wrapper {
	display: -webkit-flex;
	display: flex;
	-webkit-flex-wrap: wrap;
	flex-wrap: wrap
}

.mc-upload-picker__slot:empty {
	display: none
}

.mc-upload-picker__slot:not(:empty)+.mc-upload-picker__upload {
	display: none !important
}

.mc-upload-picker__upload {
	position: relative;
	display: -webkit-flex;
	display: flex;
	-webkit-flex-direction: column;
	flex-direction: column;
	-webkit-align-items: center;
	align-items: center;
	-webkit-justify-content: center;
	justify-content: center;
	box-sizing: border-box;
	width: 150rpx;
	height: 150rpx;
	margin: 0 22rpx 22rpx 0;
	background-color: rgba(242,242,242,1);
	border-radius: 4rpx
}

.mc-upload-picker__upload:active {
	background-color: #f2f3f5
}

.mc-upload-picker__upload-icon {
	color: #999999;
	font-size: 50rpx;
}

.mc-upload-picker__upload-text {
	margin-top: 4rpx;
	color: #969799;
	font-size: 24rpx
}

.mc-upload-picker__upload--disabled {
	opacity: .5;
	opacity: var(--uploader-disabled-opacity, .5)
}

.mc-upload-picker__preview {
	position: relative;
	margin: 0 22rpx 22rpx 0;
	cursor: pointer
}

.mc-upload-picker__preview-image {
	display: block;
	width: 150rpx;
	height: 150rpx;
	overflow: hidden;
	border-radius: 4rpx
}

.mc-upload-picker__preview-delete {
	position: absolute;
	top: -12rpx;
	right: -12rpx;
	width: 32rpx;
	height: 32rpx;
	font-size: 16rpx;
	line-height: 32rpx;
	text-align: center;
	color: #fff;
	background-color: #969799;
	border-radius: 100%;
}

.mc-upload-picker__file {
	display: -webkit-flex;
	display: flex;
	-webkit-flex-direction: column;
	flex-direction: column;
	-webkit-align-items: center;
	align-items: center;
	-webkit-justify-content: center;
	justify-content: center;
	width: 150rpx;
	height: 150rpx;
	background-color: #f7f8fa;
	border-radius: 16rpx
}

.mc-upload-picker__file-icon {
	color: #646566;
	font-size: 40rpx
}

.mc-upload-picker__file-name {
	box-sizing: border-box;
	width: 100%;
	margin-top: 16rpx;
	padding: 0 8rpx;
	color: #646566;
	font-size: 24rpx;
	text-align: center
}

.mc-upload-picker__mask {
	position: absolute;
	top: 0;
	right: 0;
	bottom: 0;
	left: 0;
	display: -webkit-flex;
	display: flex;
	-webkit-flex-direction: column;
	flex-direction: column;
	-webkit-align-items: center;
	align-items: center;
	-webkit-justify-content: center;
	justify-content: center;
	color: #fff;
	background-color: rgba(50, 50, 51, .88);
	border-radius: 4rpx
}

.mc-upload-picker__mask-icon {
	font-size: 44rpx
}

.mc-upload-picker__mask-message {
	margin-top: 12rpx;
	padding: 0 8rpx;
	font-size: 24rpx;
	line-height: 28rpx
}

.mc-upload-picker__loading {
	width: 44rpx;
	height: 44rpx;
	color: #fff
}

</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-icon": "../icon/index",
		"mc-upload": "../upload/index",
		"mc-spin": "../spin/index"
	}
}
</config>
