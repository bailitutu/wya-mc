<template>
	<view class="mc-cascader" bindtap="handleClick">
		<mc-list-item 
			wx:if="{{!useItemSlot}}"
			wrapper-class="{{paddingNone ? 'mc-cascader__padding-none' : ''}}"
			content="{{extra}}"
			label="{{label}}"
			label-width="{{labelWidth}}"
			border="{{border}}"
		/>
		<slot wx:else></slot>
	</view>
	<mc-cascader-popup 
		id="{{tag}}"
		title="{{title}}"
		cancel-text="{{cancelText}}"
		ok-text="{{okText}}"
		show-toolbar="{{showToolbar}}"
		bind:ok="handleOK"
		bind:cancel="handleCancel"
		bind:close="handleCancel"
	>
		<mc-cascader-view
			value="{{currentValue}}"
			dataSource="{{dataSource}}"
			cols="{{cols}}"
			bind:change="handleChange"
			bind:ready="handleViewReady"
		/>
	</mc-cascader-popup>
</template>
<script>
import McComponent from '../common/component';
import { isEqualWith, getSelectedData } from '../common/utils';
import Portal from '../portal/index';
import { viewProps, popupProps } from './props';

McComponent({
	relations: {
		'../form/form-item': {
			type: 'ancestor',
			linked(parent) {
				this.parent = parent;
				this.setData({
					paddingNone: true
				});
			},
			unlinked(child) {
				this.parent = null;
				this.setData({
					paddingNone: false
				});
			}
		}
	},
	props: {
		...viewProps,
		...popupProps,
		value: {
			type: Array,
			value: [],
			observer(val) {
				if (!isEqualWith(val, this.data.currentValue)) {
					this.setData({
						currentValue: val
					});
				}
			}
		},
		label: String,
		labelWidth: {
			type: String,
			optionalTypes: [Number],
		},
		tag: {
			type: String,
			value: 'cascader-popup'
		},
		useItemSlot: {
			type: Boolean,
			value: false
		},
		border: Boolean,
		extra: {
			type: String,
			value: '请选择'
		},
	},
	observers: {
		'dataSource, value': function (dataSource, value) {
			let { label, data } = getSelectedData(value, dataSource);
			label.length > 0 && this.setData({
				extra: label.join(',')
			});
		}
	},
	data: {
		currentValue: []
	},
	lifetimes: {
		attached() {
			this.Func = new Portal({ 
				el: `#${this.data.tag}` 
			});
		}
	},
	methods: {
		handleViewReady(event) {
			this.viewInstance = event.detail;
		},
		handleClick(event) {
			if (this.Func) {
				this.Func.popup({
					context: this.selectComponent(`#${this.data.tag}`),
					title: this.data.title
				}).then((res) => {
					console.log('sure', res);
				}).catch((err) => {
					// TODO 为什么第一次点击蒙层会执行这里，第二次就不会，所以picker-popup内蒙层的点击事件改为handleCancel
					console.log('close', err);
				});
			}
		},
		handleChange(event) {
			this.setData({
				pickValue: event.detail || []
			});
		},
		handleOK() {
			let { label, data } = getSelectedData(this.data.pickValue, this.data.dataSource);
			this.setData({
				extra: label.join(','),
				currentValue: this.data.pickValue,
			});
			this.$emit('change', { value: this.data.currentValue, label });
			this.parent && this.parent.fieldChange();
		},
		handleCancel() {
			this.$emit('cancel');
			this.handleClose();
		},
		handleClose() {
			this.$emit('close');
			wx.nextTick(() => {
				this.viewInstance.reset(this.data.currentValue);
			});
		}
	}
});

</script>
<style lang="scss">
@import '../common/index.scss';

.mc-cascader {
	.mc-cascader__padding-none {
		padding: 0
	}
}
</style>
<config>
{
	"component": true,
	"usingComponents": {
		"mc-list-item": "../list/list-item",
		"mc-cascader-popup": "./cascader-popup",
		"mc-cascader-view": "./cascader-view"
	}
}
</config>
